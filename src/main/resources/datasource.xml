<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.2.xsd    
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
    
    	<!-- 定义dataSource,使用c3p0实现,并注入数据源的必要信息 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${connection.driver_class}" />
		<property name="jdbcUrl" value="${connection.url}" />
		<property name="user" value="${connection.username}" />
		<property name="password" value="${connection.password}" />

		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="20" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="500" />
		<property name="initialPoolSize" value="10" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 加载mybatis.cfg.xml文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis.cfg.xml"></property>
		<!-- 自动扫描需要定义类别名的包，将包内的java类的类名作为类别名 -->
		<!-- <property name="typeAliasesPackage" value="com.song.blogstation.beans"></property> -->
		<property name="mapperLocations">
			<value>classpath*:com/song/hospital/mapper/*Mapper.xml
			</value>
		</property>
	</bean>

	<!-- 自动扫描所有的Mapper接口与文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.song.hospital"></property>
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
		<!-- 使用@Transactional注解标注方式开启事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- tx:命名空间提供<tx:advice.../>元素来配置事务增强处理,一旦使用该元素配置了事务增强处理,就可以直接使用<aop:advisor.../>元素启用自动代理 -->
	<!-- name:与该事务语义关联的方法名,propagation:事务传播属性,isolation:隔离级别,read-only:该事务是否只读,rollback-for:指定事务回滚的异常类,应使用全限定类名 -->
	<!-- rollback-for="java.lang.Exception" -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	只对业务逻辑层开启事务，其他包下的方法也可完成数据库操作但没有事务回滚等功能
	execution表达式:第一个*表示返回类型（*表示不限返回类型）,包名（..表示当前包及当前包的所有子孙包）,第二个*表示类名（*表示不限类名）
	第三个*表示方法名（*表示不限方法名）,括号中的..表示方法的参数（..表示任何参数，不限参数类型和个数）
	<aop:config expose-proxy="true">
		定义一个切入点pointcut->txPointcut匹配*包下所有方法的执行
		<aop:pointcut id="txPointcut"
			expression="execution(* com.song.blogstation.service..*.*(..))" />
		指定在txPointcut切入点应用txAdvice事务增强处理
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config> -->
    </beans>